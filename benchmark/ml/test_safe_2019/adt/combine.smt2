(set-logic HORN)
(set-info :source |
  Benchmark: /home/katsura/hflmc2/benchmark/ml/test_safe_2019/adt/combine.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_110[0:0]| ( Int) Bool)
(declare-fun |combine[0:2]| ( Int  Int) Bool)
(declare-fun |make_unit_list[0:1][0:0]| ( Int  Int) Bool)
(declare-fun |make_unit_list[0:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_110[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|combine[0:2]| x1 x2) (or (and (>= x1 1) (<= x2 0)) (and (>= x2 1) (<= x1 0)))) (|fail_110[0:0]| x0))))
(assert (forall ((x1 Int)(x0 Int)(var359 Int)) (=> (and (|make_unit_list[0:1][0:0]| var359 x1) (= x1 x0)) (|combine[0:2]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)(var361 Int)(var360 Int)) (=> (and (|make_unit_list[0:1][0:0]| var360 var361) (and (|make_unit_list[0:0]| x0) (= x1 (+ 1 var361)))) (|make_unit_list[0:1][0:0]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|make_unit_list[0:0]| x0) (= x1 0)) (|make_unit_list[0:1][0:0]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (|make_unit_list[0:0]| x1) (|make_unit_list[0:0]| x0))))
(assert (forall ((x0 Int)) (|make_unit_list[0:0]| x0)))
(check-sat)
(get-model)
(exit)
